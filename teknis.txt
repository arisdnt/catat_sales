Dokumentasi Teknis & Logika Bisnis: Sistem Pencatatan Penjualan Titip Bayar
Versi: 1.2
Tanggal: 16 Juli 2025

1. Ringkasan Eksekutif
Dokumen ini menjelaskan arsitektur teknis, struktur database, dan alur logika bisnis untuk aplikasi Sistem Pencatatan Penjualan Titip Bayar. Sistem ini bertujuan untuk mendigitalkan dan mengotomatiskan proses dari pengiriman barang oleh sales ke toko, proses penagihan, hingga pencatatan setoran uang tunai ke bagian akunting.

Tujuan utamanya adalah untuk menyediakan data yang akurat, transparan, dan dapat dilacak (traceable) untuk semua aktivitas penjualan di lapangan.

2. Teknologi yang Digunakan
Frontend: Next.js (App Router)

Styling: Tailwind CSS & shadcn/ui

Backend & API: Next.js API Routes (App Router Route Handlers)

Database: Supabase (PostgreSQL)

Autentikasi: Supabase Auth

3. Arsitektur Sistem
Sistem ini menggunakan arsitektur modern berbasis JavaScript dengan Next.js sebagai framework utama yang menangani frontend dan backend (API layer).

[Pengguna: Sales/Admin]
       |
       v
[Frontend: Next.js + shadcn/ui]  <-- Berinteraksi dengan
       |
       v
[API Layer: Next.js Route Handlers] <-- Mengelola logika & validasi
       |
       v
[Autentikasi: Supabase Auth]      <-- Mengamankan akses API
       |
       v
[Database: Supabase (PostgreSQL)] <-- Menyimpan semua data

4. Logika Bisnis & Alur Kerja Utama
Sistem ini memodelkan tiga proses bisnis utama: Pengiriman, Penagihan, dan Setoran.

4.1. Alur Pengiriman Barang
Proses pencatatan barang yang dikirim oleh sales ke toko.

4.2. Alur Penagihan ke Toko
Proses pencatatan pembayaran dari toko, termasuk barang terjual, retur, dan potensi potongan harga.

4.3. Alur Setoran & Rekonsiliasi
Proses pencatatan setoran uang tunai ke kantor dan logika untuk rekonsiliasi data.

5. Struktur Database (Supabase)
Berikut adalah detail dari setiap tabel dalam database PostgreSQL di Supabase.

Tabel Master
1. sales
Menyimpan data master para sales.
| Nama Kolom | Tipe Data | Keterangan |
|:---|:---|:---|
| id_sales | INT | Primary Key. |
| nama_sales | VARCHAR(255)| Nama lengkap sales. |
| nomor_telepon| VARCHAR(20) | Nomor telepon sales. |
| status_aktif| BOOLEAN | 1=Aktif, 0=Tidak Aktif. |
| dibuat_pada | TIMESTAMP | Stempel waktu otomatis saat dibuat. |
| diperbarui_pada| TIMESTAMP | Stempel waktu otomatis saat diubah. |

2. toko
Menyimpan data master toko/klien, termasuk penanggung jawab sales-nya.
| Nama Kolom | Tipe Data | Keterangan |
|:---|:---|:---|
| id_toko | INT | Primary Key. |
| id_sales | INT | Foreign Key ke sales(id_sales). |
| nama_toko | VARCHAR(255)| Nama toko. |
| alamat | TEXT | Alamat lengkap. |
| desa | VARCHAR(100)| Nama desa/kelurahan. |
| kecamatan | VARCHAR(100)| Nama kecamatan. |
| kabupaten | VARCHAR(100)| Nama kabupaten/kota. |
| link_gmaps | TEXT | Link lokasi dari Google Maps. |
| status_toko | BOOLEAN | 1=Aktif, 0=Tidak Aktif. |
| dibuat_pada | TIMESTAMP | Stempel waktu otomatis saat dibuat. |
| diperbarui_pada| TIMESTAMP | Stempel waktu otomatis saat diubah. |

3. produk
Menyimpan data master semua produk yang dijual.
| Nama Kolom | Tipe Data | Keterangan |
|:---|:---|:---|
| id_produk | INT | Primary Key. |
| nama_produk | VARCHAR(255) | Nama lengkap produk. |
| harga_satuan| DECIMAL(10, 2) | Harga jual satuan. |
| status_produk| BOOLEAN | 1=Aktif, 0=Tidak Aktif. |
| dibuat_pada | TIMESTAMP | Stempel waktu otomatis saat dibuat. |
| diperbarui_pada| TIMESTAMP | Stempel waktu otomatis saat diubah. |

Tabel Transaksi
4. pengiriman
Header untuk setiap peristiwa pengiriman barang ke toko.
| Nama Kolom | Tipe Data | Keterangan |
|:---|:---|:---|
| id_pengiriman | INT | Primary Key. |
| id_toko | INT | Foreign Key ke toko(id_toko). |
| tanggal_kirim | DATE | Tanggal barang dikirim. |
| dibuat_pada | TIMESTAMP | Stempel waktu otomatis saat dibuat. |
| diperbarui_pada| TIMESTAMP | Stempel waktu otomatis saat diubah. |

5. detail_pengiriman
Rincian barang apa saja yang ada dalam satu pengiriman.
| Nama Kolom | Tipe Data | Keterangan |
|:---|:---|:---|
| id_detail_kirim | INT | Primary Key. |
| id_pengiriman | INT | Foreign Key ke pengiriman(id_pengiriman). |
| id_produk | INT | Foreign Key ke produk(id_produk). |
| jumlah_kirim | INT | Jumlah produk yang dikirim. |
| dibuat_pada | TIMESTAMP | Stempel waktu otomatis saat dibuat. |
| diperbarui_pada| TIMESTAMP | Stempel waktu otomatis saat diubah. |

6. penagihan
Header untuk setiap peristiwa penagihan ke toko.
| Nama Kolom | Tipe Data | Keterangan |
|:---|:---|:---|
| id_penagihan | INT | Primary Key. |
| id_toko | INT | Foreign Key ke toko(id_toko). |
| total_uang_diterima| DECIMAL(12,2)| Jumlah akhir uang yang diterima setelah potongan. |
| metode_pembayaran| ENUM('Cash', 'Transfer')| Cara pembayaran oleh toko. |
| ada_potongan | BOOLEAN | Penanda. 1 jika ada potongan, 0 jika tidak. |
| dibuat_pada | TIMESTAMP | Stempel waktu otomatis. |
| diperbarui_pada| TIMESTAMP | Stempel waktu otomatis saat diubah. |

7. detail_penagihan
Rincian barang yang terjual dan kembali saat penagihan.
| Nama Kolom | Tipe Data | Keterangan |
|:---|:---|:---|
| id_detail_tagih | INT | Primary Key. |
| id_penagihan | INT | Foreign Key ke penagihan(id_penagihan). |
| id_produk | INT | Foreign Key ke produk(id_produk). |
| jumlah_terjual | INT | Jumlah produk yang laku. |
| jumlah_kembali | INT | Jumlah produk yang dikembalikan. |
| dibuat_pada | TIMESTAMP | Stempel waktu otomatis saat dibuat. |
| diperbarui_pada| TIMESTAMP | Stempel waktu otomatis saat diubah. |

8. potongan_penagihan
Mencatat data potongan jika ada pada sebuah penagihan.
| Nama Kolom | Tipe Data | Keterangan |
|:---|:---|:---|
| id_potongan | INT | Primary Key. |
| id_penagihan | INT | Foreign Key ke penagihan(id_penagihan). |
| jumlah_potongan | DECIMAL(12,2)| Besaran nominal potongan yang diberikan. |
| alasan | TEXT | Alasan mengapa potongan diberikan. |
| dibuat_pada | TIMESTAMP | Stempel waktu otomatis saat dibuat. |
| diperbarui_pada| TIMESTAMP | Stempel waktu otomatis saat diubah. |

9. setoran
Mencatat peristiwa setoran uang tunai ke kantor/akunting.
| Nama Kolom | Tipe Data | Keterangan |
|:---|:---|:---|
| id_setoran | INT | Primary Key. |
| total_setoran | DECIMAL(14, 2)| Total uang yang diserahkan. |
| penerima_setoran| VARCHAR(100)| Nama staf yang menerima setoran. |
| dibuat_pada | TIMESTAMP | Stempel waktu otomatis (menjadi tanggal setoran). |
| diperbarui_pada| TIMESTAMP | Stempel waktu otomatis saat diubah. |

6. Alur Data API (Route Handlers)
POST /api/pengiriman

POST /api/penagihan

POST /api/setoran

GET /api/laporan/rekonsiliasi

Endpoint CRUD Standar: /api/produk, /api/toko, /api/sales

7. Autentikasi & Otorisasi
Login: Menggunakan email & password via Supabase Auth.

Manajemen Sesi: Menggunakan JWT dari Supabase.

Keamanan Data (RLS): Row Level Security diaktifkan di Supabase untuk membatasi akses data sesuai peran pengguna.

API Protection: Middleware di Next.js akan memvalidasi JWT pada setiap request API.

8. Struktur Folder Proyek (Next.js)
Struktur folder dirancang untuk skalabilitas dan kemudahan pemeliharaan menggunakan Next.js App Router dengan detail halaman CRUD.

/
├── /app/
│   ├── /(auth)/
│   │   └── /login/page.tsx
│   ├── /(dashboard)/
│   │   ├── /dashboard/page.tsx         # Halaman utama dashboard
│   │   │
│   │   ├── /pengiriman/
│   │   │   ├── page.tsx                # Daftar semua pengiriman
│   │   │   ├── /new/page.tsx           # Form membuat pengiriman baru
│   │   │   └── /[id]/page.tsx          # Halaman detail pengiriman
│   │   │
│   │   ├── /penagihan/
│   │   │   ├── page.tsx                # Daftar semua penagihan
│   │   │   ├── /new/page.tsx           # Form membuat penagihan baru
│   │   │   └── /[id]/page.tsx          # Halaman detail penagihan
│   │   │
│   │   ├── /setoran/
│   │   │   ├── page.tsx                # Daftar semua setoran
│   │   │   └── /new/page.tsx           # Form membuat setoran baru
│   │   │
│   │   ├── /laporan/
│   │   │   └── /rekonsiliasi/page.tsx  # Halaman laporan rekonsiliasi
│   │   │
│   │   ├── /master-data/
│   │   │   ├── /produk/
│   │   │   │   ├── page.tsx            # Daftar produk
│   │   │   │   ├── /new/page.tsx       # Form produk baru
│   │   │   │   └── /[id]/edit/page.tsx # Form edit produk
│   │   │   ├── /toko/
│   │   │   │   ├── page.tsx            # Daftar toko
│   │   │   │   ├── /new/page.tsx       # Form toko baru
│   │   │   │   └── /[id]/edit/page.tsx # Form edit toko
│   │   │   └── /sales/
│   │   │       ├── page.tsx            # Daftar sales
│   │   │       ├── /new/page.tsx       # Form sales baru
│   │   │       └── /[id]/edit/page.tsx # Form edit sales
│   │   │
│   │   └── layout.tsx                  # Layout utama dashboard (dengan sidebar)
│   │
│   ├── /api/
│   │   └── ...
│   ├── layout.tsx
│   └── page.tsx
│
├── /components/
│   ├── /ui/                            # Komponen dari shadcn/ui
│   ├── /shared/                        # Komponen custom yang reusable
│   └── /forms/                         # Komponen form spesifik
│       ├── ProdukForm.tsx
│       └── TokoForm.tsx
│
├── /lib/
│   ├── supabase.ts
│   └── utils.ts
│
├── /styles/
│   └── globals.css
│
└── .env.local

9. Struktur Halaman & Komponen Reusable
9.1. Halaman Utama
Login: Halaman untuk masuk ke sistem.

Dashboard: Halaman utama setelah login, menampilkan ringkasan data penting.

Pengiriman: Halaman untuk membuat dan melihat riwayat pengiriman barang.

Penagihan: Halaman untuk membuat dan melihat riwayat penagihan ke toko.

Setoran: Halaman untuk mencatat setoran uang tunai.

Master Data: Halaman untuk mengelola (CRUD) data produk, toko, dan sales.

Laporan: Halaman untuk melihat laporan, seperti rekonsiliasi setoran.

9.2. Komponen Reusable (di dalam /components)
Komponen UI (dari shadcn/ui): Button, Card, Input, Table, Dialog, DatePicker, Select.

Komponen Shared (Custom):

PageHeader.tsx: Komponen standar untuk judul dan tombol aksi.

DataTable.tsx: Komponen tabel canggih dengan sorting, filtering, dan pagination.

ConfirmationDialog.tsx: Dialog konfirmasi sebelum aksi hapus.

Sidebar.tsx: Navigasi utama dashboard.

StatsCard.tsx: Kartu untuk menampilkan data statistik.

10. Catatan Implementasi
Variabel Lingkungan: Kunci API Supabase akan disimpan dalam .env.local.

Transaksi Database: Untuk operasi multi-tabel (seperti penagihan), gunakan Supabase Edge Functions (RPC) untuk memastikan transaksi atomik.