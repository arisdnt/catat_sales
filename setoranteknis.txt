### Technical Note: Refactoring `v_setoran_dashboard` for Transaction-Level Cash Flow

**Objective:**
To refactor the `v_setoran_dashboard` view to display a detailed, transaction-level ledger. This will show individual cash payments and deposits in chronological order and calculate a running balance of cash on hand after each transaction.

**Current State Analysis:**
The existing `v_setoran_dashboard` aggregates data daily. It shows the total cash payments for a given day and the total deposits for that same day, rather than showing each transaction individually. This makes it difficult to trace the cash flow from a specific payment to a specific deposit.

**Proposed Implementation Plan:**
The new view will be built using Common Table Expressions (CTEs) to create a unified ledger of all cash-related events.

1.  **Unify Cash Events**: Combine cash payments from `penagihan` and deposits from `setoran` into a single, chronological list of events using a `UNION ALL`.
2.  **Calculate Running Balance**: Use a window function (`SUM() OVER()`) on the unified list to calculate the cash balance after each transaction.
3.  **Structure the View**: The final view will display one row per transaction (either a payment or a deposit) and show the running cash balance.

---

### **SQL Implementation:**

Here is the proposed SQL code to create the new `v_setoran_dashboard` view.

```sql
CREATE OR REPLACE VIEW public.v_setoran_dashboard AS

-- Step 1: Create a CTE for all cash payments from the 'penagihan' table.
WITH cash_payments AS (
    SELECT
        p.dibuat_pada AS event_timestamp,
        'PEMBAYARAN_CASH' AS event_type,
        'Pembayaran cash dari ' || t.nama_toko AS description,
        p.total_uang_diterima AS cash_in,
        0 AS cash_out,
        p.id_penagihan AS related_id
    FROM
        public.penagihan p
    JOIN
        public.toko t ON p.id_toko = t.id_toko
    WHERE
        p.metode_pembayaran = 'Cash'
),

-- Step 2: Create a CTE for all deposits from the 'setoran' table.
deposits AS (
    SELECT
        s.dibuat_pada AS event_timestamp,
        'SETORAN' AS event_type,
        'Setoran diterima oleh ' || s.penerima_setoran AS description,
        0 AS cash_in,
        s.total_setoran AS cash_out,
        s.id_setoran AS related_id
    FROM
        public.setoran s
),

-- Step 3: Combine payments and deposits into a single event stream.
cash_flow_events AS (
    SELECT * FROM cash_payments
    UNION ALL
    SELECT * FROM deposits
)

-- Step 4: Select from the combined events and calculate the running balance.
SELECT
    c.event_timestamp,
    c.event_type,
    c.description,
    c.related_id,
    c.cash_in,
    c.cash_out,
    -- This window function calculates the cumulative sum of cash_in - cash_out
    -- ordered by the transaction time, giving a running balance.
    SUM(c.cash_in - c.cash_out) OVER (ORDER BY c.event_timestamp, c.related_id) AS running_balance
FROM
    cash_flow_events c
ORDER BY
    c.event_timestamp, c.related_id;

```

### **Summary of Changes and Benefits:**

*   **Requirement 1 & 2 (Cash & Transfer Payments):** The `cash_payments` CTE specifically selects cash payments from the `penagihan` table. Transfer payments are implicitly excluded from this cash flow view but can be added if needed.
*   **Requirement 3 (Deposit Data):** The `deposits` CTE pulls the deposit amount from `setoran.total_setoran`.
*   **Requirement 4 (Running Balance):** The `SUM(...) OVER(...)` window function provides a "subtract-as-you-go" calculation, showing the precise cash-on-hand balance after every single transaction.
*   **Requirement 5 (One Row Per Transaction):** By using `UNION ALL` instead of `JOIN`ing aggregated data, the view now correctly displays each payment and deposit as a distinct row.
